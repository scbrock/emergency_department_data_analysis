#mus <- list(as.vector(c(2,60)),as.vector(c(2,50)))
#sigs <- list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2))
#theta <- list(pis=pis,mus=mus,sigs=sigs)
# for obs.ll we need pis, mus and sigmas
oll.list = c()
#mydata <- as.matrix(faithful)
oll.list[0] = obs.ll(theta, mydata)
thetaNew = theta
# only update some of the zhats at an iteration
z.hats <- getZhats(theta, mydata)
for(q in 1:100) {
#print(q)
sub.indices <- sample(1:nrow(mydata),m)
sub.data <- mydata[sub.indices,]
comp.data <- mydata[-sub.indices,]
z.hats[sub.indices,] <- getZhats(theta, sub.data)
#print(min(z.hats))
theta = paramUpdates(z.hats[sub.indices,], sub.data, theta)
#print(theta)
oll.list[q] = obs.ll(theta, mydata)
}
return(list(theta.mle=theta,obsLog = oll.list, zhats=z.hats))
}
result <- incremental.em(mydata)
matrix(c(0,0,0,0),2,2)-c(1,1)
matrix(c(1,3,2,4),2,2)-c(1,2)
# use multinomial distribution to generate z values.
# multinomial probabilities will update each iteration, and thus the z values will update too
# when performing the sum, only average over the one instance (stochastic), calculating the log(x,z|theta)
EM.fun <- function(mydata, theta = list(pis=c(0.1,0.9), mus=list(as.vector(c(2,60)),as.vector(c(2,50))),
sigs=list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2)))) {
#pis <- c(0.1,0.9)
#mus <- list(as.vector(c(2,60)),as.vector(c(2,50)))
#sigs <- list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2))
#theta <- list(pis=pis,mus=mus,sigs=sigs)
# for obs.ll we need pis, mus and sigmas
oll.list = c()
#mydata <- as.matrix(faithful)
oll.list[0] = obs.ll(theta, mydata)
n <- nrow(mydata)
num.g <- length(theta$pis)
for(q in 1:10) {
#print(q)
#z.hats <- getZhats(theta, mydata)  # draw from a multinomial distribution for each x
zprobs = matrix(rep(0,n*num.g),nrow=n,ncol=num.g)
for(j in 1:n){
for(i in 1:num.g) {
a <- dmvnorm(mydata[j,],theta$mus[[i]],theta$sigs[[i]],log=TRUE)
zprobs[j,i] <- log(theta$pis[i])+a
}
}
rowMaxes <- apply(zprobs,1,max)
zprobs <- zprobs - rowMaxes
zprobs <- exp(zprobs)
rowSums <- apply(zprobs,1,sum)
zprobs <- zprobs/rowSums
#print(min(z.hats))
z.hats <- matrix(rep(0, n*num.g),n,num.g)
for(i in 1:n){
z.hats[i,] <- multinom(1, 1, zprobs[i,])  # this will return a vector so need to insert into a row of a matrix
}
theta = paramUpdates(z.hats, mydata, theta)
#print(theta)
oll.list[q+1] = obs.ll(theta, mydata)
}
return(list(theta.mle=theta,obsLog = oll.list, zhats=z.hats))
}
# use multinomial distribution to generate z values.
# multinomial probabilities will update each iteration, and thus the z values will update too
# when performing the sum, only average over the one instance (stochastic), calculating the log(x,z|theta)
stochastic.em <- function(mydata, theta = list(pis=c(0.1,0.9), mus=list(as.vector(c(2,60)),as.vector(c(2,50))),
sigs=list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2)))) {
#pis <- c(0.1,0.9)
#mus <- list(as.vector(c(2,60)),as.vector(c(2,50)))
#sigs <- list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2))
#theta <- list(pis=pis,mus=mus,sigs=sigs)
# for obs.ll we need pis, mus and sigmas
oll.list = c()
#mydata <- as.matrix(faithful)
oll.list[0] = obs.ll(theta, mydata)
n <- nrow(mydata)
num.g <- length(theta$pis)
for(q in 1:10) {
#print(q)
#z.hats <- getZhats(theta, mydata)  # draw from a multinomial distribution for each x
zprobs = matrix(rep(0,n*num.g),nrow=n,ncol=num.g)
for(j in 1:n){
for(i in 1:num.g) {
a <- dmvnorm(mydata[j,],theta$mus[[i]],theta$sigs[[i]],log=TRUE)
zprobs[j,i] <- log(theta$pis[i])+a
}
}
rowMaxes <- apply(zprobs,1,max)
zprobs <- zprobs - rowMaxes
zprobs <- exp(zprobs)
rowSums <- apply(zprobs,1,sum)
zprobs <- zprobs/rowSums
#print(min(z.hats))
z.hats <- matrix(rep(0, n*num.g),n,num.g)
for(i in 1:n){
z.hats[i,] <- multinom(1, 1, zprobs[i,])  # this will return a vector so need to insert into a row of a matrix
}
theta = paramUpdates(z.hats, mydata, theta)
#print(theta)
oll.list[q+1] = obs.ll(theta, mydata)
}
return(list(theta.mle=theta,obsLog = oll.list, zhats=z.hats))
}
set.seed(23)
mydata <- as.matrix(faithful)
EM.fun <- function(mydata, theta = list(pis=c(0.1,0.9), mus=list(as.vector(c(2,60)),as.vector(c(2,50))),
sigs=list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2)))) {
#pis <- c(0.1,0.9)
#mus <- list(as.vector(c(2,60)),as.vector(c(2,50)))
#sigs <- list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2))
#theta <- list(pis=pis,mus=mus,sigs=sigs)
# for obs.ll we need pis, mus and sigmas
oll.list = c()
#mydata <- as.matrix(faithful)
oll.list[0] = obs.ll(theta, mydata)
for(q in 1:10) {
#print(q)
z.hats <- getZhats(theta, mydata)
#print(min(z.hats))
theta = paramUpdates(z.hats, mydata, theta)
#print(theta)
oll.list[q+1] = obs.ll(theta, mydata)
}
return(list(theta.mle=theta,obsLog = oll.list, zhats=z.hats))
}
#
res <- EM.fun(mydata)
theta.mle <- res$theta.mle
print(theta.mle)
#contour(x=x1, y=x2, z= den, nlevels=5, add=TRUE)
# return parameters as a list
paramUpdates <- function(z.hats, data, theta) {
#print(z.hats)
pis <- theta$pis
mus <- theta$mus
sigs <- theta$sigs
num.g <- length(pis)
dlen = nrow(data)
newMus <- list()
newSigs <- list()
newPis <- apply(z.hats, 2, mean)
zsums <- apply(z.hats,2,sum)
for(i in 1:num.g) {
v1 <- as.vector(z.hats[,i])  # assumes column vector
#print(length(v1))
#print(dim(data))
#print(v1)
#print(data)
#print(length(v1))
#print(dim(data))
newMus[[i]] <- (t(v1) %*% data)/zsums[i]
}
for(i in 1:num.g) {
temp <- sweep(data,2,mus[[i]])
#print(dim(temp))
#print(length(z.hats[,i]))
#print("here")
#print(max(z.hats[,i]))
newSigs[[i]] <- cov.wt(x=temp,wt=z.hats[,i])$cov
#print("here 2")
}
return(list(pis=newPis, mus=newMus, sigs=newSigs))
}
# use multinomial distribution to generate z values.
# multinomial probabilities will update each iteration, and thus the z values will update too
# when performing the sum, only average over the one instance (stochastic), calculating the log(x,z|theta)
stochastic.em <- function(mydata, theta = list(pis=c(0.1,0.9), mus=list(as.vector(c(2,60)),as.vector(c(2,50))),
sigs=list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2)))) {
#pis <- c(0.1,0.9)
#mus <- list(as.vector(c(2,60)),as.vector(c(2,50)))
#sigs <- list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2))
#theta <- list(pis=pis,mus=mus,sigs=sigs)
# for obs.ll we need pis, mus and sigmas
oll.list = c()
#mydata <- as.matrix(faithful)
oll.list[0] = obs.ll(theta, mydata)
n <- nrow(mydata)
num.g <- length(theta$pis)
for(q in 1:10) {
#print(q)
#z.hats <- getZhats(theta, mydata)  # draw from a multinomial distribution for each x
zprobs = matrix(rep(0,n*num.g),nrow=n,ncol=num.g)
for(j in 1:n){
for(i in 1:num.g) {
a <- dmvnorm(mydata[j,],theta$mus[[i]],theta$sigs[[i]],log=TRUE)
zprobs[j,i] <- log(theta$pis[i])+a
}
}
rowMaxes <- apply(zprobs,1,max)
zprobs <- zprobs - rowMaxes
zprobs <- exp(zprobs)
rowSums <- apply(zprobs,1,sum)
zprobs <- zprobs/rowSums
#print(min(z.hats))
z.hats <- matrix(rep(0, n*num.g),n,num.g)
for(i in 1:n){
z.hats[i,] <- multinom(1, 1, zprobs[i,])  # this will return a vector so need to insert into a row of a matrix
}
theta = paramUpdates(z.hats, mydata, theta)
#print(theta)
oll.list[q+1] = obs.ll(theta, mydata)
}
return(list(theta.mle=theta,obsLog = oll.list, zhats=z.hats))
}
# use multinomial distribution to generate z values.
# multinomial probabilities will update each iteration, and thus the z values will update too
# when performing the sum, only average over the one instance (stochastic), calculating the log(x,z|theta)
stochastic.em <- function(mydata, theta = list(pis=c(0.1,0.9), mus=list(as.vector(c(2,60)),as.vector(c(2,50))),
sigs=list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2)))) {
#pis <- c(0.1,0.9)
#mus <- list(as.vector(c(2,60)),as.vector(c(2,50)))
#sigs <- list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2))
#theta <- list(pis=pis,mus=mus,sigs=sigs)
# for obs.ll we need pis, mus and sigmas
oll.list = c()
#mydata <- as.matrix(faithful)
oll.list[0] = obs.ll(theta, mydata)
n <- nrow(mydata)
num.g <- length(theta$pis)
for(q in 1:10) {
#print(q)
#z.hats <- getZhats(theta, mydata)  # draw from a multinomial distribution for each x
zprobs = matrix(rep(0,n*num.g),nrow=n,ncol=num.g)
for(j in 1:n){
for(i in 1:num.g) {
a <- dmvnorm(mydata[j,],theta$mus[[i]],theta$sigs[[i]],log=TRUE)
zprobs[j,i] <- log(theta$pis[i])+a
}
}
rowMaxes <- apply(zprobs,1,max)
zprobs <- zprobs - rowMaxes
zprobs <- exp(zprobs)
rowSums <- apply(zprobs,1,sum)
zprobs <- zprobs/rowSums
#print(min(z.hats))
z.hats <- matrix(rep(0, n*num.g),n,num.g)
for(i in 1:n){
z.hats[i,] <- multinom(1, 1, zprobs[i,])  # this will return a vector so need to insert into a row of a matrix
}
theta = paramUpdates(z.hats, mydata, theta)
#print(theta)
oll.list[q] = obs.ll(theta, mydata)
}
return(list(theta.mle=theta,obsLog = oll.list, zhats=z.hats))
}
stochastic.em(mydata)
# use multinomial distribution to generate z values.
# multinomial probabilities will update each iteration, and thus the z values will update too
# when performing the sum, only average over the one instance (stochastic), calculating the log(x,z|theta)
stochastic.em <- function(mydata, theta = list(pis=c(0.1,0.9), mus=list(as.vector(c(2,60)),as.vector(c(2,50))),
sigs=list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2)))) {
#pis <- c(0.1,0.9)
#mus <- list(as.vector(c(2,60)),as.vector(c(2,50)))
#sigs <- list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2))
#theta <- list(pis=pis,mus=mus,sigs=sigs)
# for obs.ll we need pis, mus and sigmas
oll.list = c()
#mydata <- as.matrix(faithful)
oll.list[0] = obs.ll(theta, mydata)
n <- nrow(mydata)
num.g <- length(theta$pis)
for(q in 1:10) {
#print(q)
#z.hats <- getZhats(theta, mydata)  # draw from a multinomial distribution for each x
zprobs = matrix(rep(0,n*num.g),nrow=n,ncol=num.g)
for(j in 1:n){
for(i in 1:num.g) {
a <- dmvnorm(mydata[j,],theta$mus[[i]],theta$sigs[[i]],log=TRUE)
zprobs[j,i] <- log(theta$pis[i])+a
}
}
rowMaxes <- apply(zprobs,1,max)
zprobs <- zprobs - rowMaxes
zprobs <- exp(zprobs)
rowSums <- apply(zprobs,1,sum)
zprobs <- zprobs/rowSums
#print(min(z.hats))
z.hats <- matrix(rep(0, n*num.g),n,num.g)
for(i in 1:n){
z.hats[i,] <- rmultinom(1, 1, zprobs[i,])  # this will return a vector so need to insert into a row of a matrix
}
theta = paramUpdates(z.hats, mydata, theta)
#print(theta)
oll.list[q] = obs.ll(theta, mydata)
}
return(list(theta.mle=theta,obsLog = oll.list, zhats=z.hats))
}
stochastic.em(mydata)
# use multinomial distribution to generate z values.
# multinomial probabilities will update each iteration, and thus the z values will update too
# when performing the sum, only average over the one instance (stochastic), calculating the log(x,z|theta)
stochastic.em <- function(mydata, theta = list(pis=c(0.1,0.9), mus=list(as.vector(c(2,60)),as.vector(c(2,50))),
sigs=list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2)))) {
#pis <- c(0.1,0.9)
#mus <- list(as.vector(c(2,60)),as.vector(c(2,50)))
#sigs <- list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2))
#theta <- list(pis=pis,mus=mus,sigs=sigs)
# for obs.ll we need pis, mus and sigmas
oll.list = c()
#mydata <- as.matrix(faithful)
oll.list[0] = obs.ll(theta, mydata)
n <- nrow(mydata)
num.g <- length(theta$pis)
for(q in 1:10) {
#print(q)
#z.hats <- getZhats(theta, mydata)  # draw from a multinomial distribution for each x
zprobs = matrix(rep(0,n*num.g),nrow=n,ncol=num.g)
for(j in 1:n){
for(i in 1:num.g) {
a <- dmvnorm(mydata[j,],theta$mus[[i]],theta$sigs[[i]],log=TRUE)
zprobs[j,i] <- log(theta$pis[i])+a
}
}
rowMaxes <- apply(zprobs,1,max)
zprobs <- zprobs - rowMaxes
zprobs <- exp(zprobs)
rowSums <- apply(zprobs,1,sum)
zprobs <- zprobs/rowSums
#print(min(z.hats))
z.hats <- matrix(rep(0, n*num.g),n,num.g)
for(i in 1:n){
z.hats[i,] <- rmultinom(1, 1, zprobs[i,])  # this will return a vector so need to insert into a row of a matrix
}
theta = paramUpdates(z.hats, mydata, theta)
#print(theta)
oll.list[q] = obs.ll(theta, mydata)
}
return(list(theta.mle=theta,obsLog = oll.list, zhats=z.hats))
}
result.stoch <- stochastic.em(mydata)
# use multinomial distribution to generate z values.
# multinomial probabilities will update each iteration, and thus the z values will update too
# when performing the sum, only average over the one instance (stochastic), calculating the log(x,z|theta)
stochastic.em <- function(mydata, theta = list(pis=c(0.1,0.9), mus=list(as.vector(c(2,60)),as.vector(c(2,50))),
sigs=list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2)))) {
#pis <- c(0.1,0.9)
#mus <- list(as.vector(c(2,60)),as.vector(c(2,50)))
#sigs <- list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2))
#theta <- list(pis=pis,mus=mus,sigs=sigs)
# for obs.ll we need pis, mus and sigmas
oll.list = c()
#mydata <- as.matrix(faithful)
oll.list[0] = obs.ll(theta, mydata)
n <- nrow(mydata)
num.g <- length(theta$pis)
for(q in 1:100) {
#print(q)
#z.hats <- getZhats(theta, mydata)  # draw from a multinomial distribution for each x
zprobs = matrix(rep(0,n*num.g),nrow=n,ncol=num.g)
for(j in 1:n){
for(i in 1:num.g) {
a <- dmvnorm(mydata[j,],theta$mus[[i]],theta$sigs[[i]],log=TRUE)
zprobs[j,i] <- log(theta$pis[i])+a
}
}
rowMaxes <- apply(zprobs,1,max)
zprobs <- zprobs - rowMaxes
zprobs <- exp(zprobs)
rowSums <- apply(zprobs,1,sum)
zprobs <- zprobs/rowSums
#print(min(z.hats))
z.hats <- matrix(rep(0, n*num.g),n,num.g)
for(i in 1:n){
z.hats[i,] <- rmultinom(1, 1, zprobs[i,])  # this will return a vector so need to insert into a row of a matrix
}
theta = paramUpdates(z.hats, mydata, theta)
#print(theta)
oll.list[q] = obs.ll(theta, mydata)
}
return(list(theta.mle=theta,obsLog = oll.list, zhats=z.hats))
}
result.stoch <- stochastic.em(mydata)
plot(result.stoch$obsLog, xlab="iteration", ylab="observed log-likelihood", type="o")
mvrnorm()
mvrnorm(n=1, mu=mus[[gis[i]]],Sigma=sigs[[gis[i]]])
mvrnorm(n=1, mu=c(0,0),Sigma=matrix(c(1,0,0,1),2,2))
library(MASS)
generateX <- function(theta, n) {
pis <- theta$pis
mus <- theta$mus
sigs <- theta$sigs
#print(mus)
#print(sigs)
gis = apply(rmultinom(n, 1, pis),2,which.max)
#print(gis)
generate = c()
for(i in 1:n) {
#print(mus[gis[i]])
#print(sigs[gis[i]])
generate[i] <- mvrnorm(n=1, mu=mus[[gis[i]]],Sigma=sigs[[gis[i]]])
}
return(generate)
}
m0 <- rep(0,2)
m1 <- matrix(c(1,0,0,1),nrow=2,ncol=2)
a <- list(pis=c(0.2,0.2,0.2,0.3,0.1), mus=c(m0,m0,m0,m0,m0), sigs=c(m1,m1,m1,m1,m1))
b = generateX(a,5)
set.seed(23)
mydata <- as.matrix(faithful)
EM.fun <- function(mydata, theta = list(pis=c(0.1,0.9), mus=list(as.vector(c(2,60)),as.vector(c(2,50))),
sigs=list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2)))) {
#pis <- c(0.1,0.9)
#mus <- list(as.vector(c(2,60)),as.vector(c(2,50)))
#sigs <- list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2))
#theta <- list(pis=pis,mus=mus,sigs=sigs)
# for obs.ll we need pis, mus and sigmas
oll.list = c()
#mydata <- as.matrix(faithful)
oll.list[0] = obs.ll(theta, mydata)
for(q in 1:10) {
#print(q)
z.hats <- getZhats(theta, mydata)
#print(min(z.hats))
theta = paramUpdates(z.hats, mydata, theta)
#print(theta)
oll.list[q+1] = obs.ll(theta, mydata)
}
return(list(theta.mle=theta,obsLog = oll.list, zhats=z.hats))
}
#
res <- EM.fun(mydata)
theta.mle <- res$theta.mle
print(theta.mle)
#contour(x=x1, y=x2, z= den, nlevels=5, add=TRUE)
m <- 20
incremental.em <- function(mydata, theta = list(pis=c(0.1,0.9), mus=list(as.vector(c(2,60)),as.vector(c(2,50))),
sigs=list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2)))) {
#pis <- c(0.1,0.9)
#mus <- list(as.vector(c(2,60)),as.vector(c(2,50)))
#sigs <- list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2))
#theta <- list(pis=pis,mus=mus,sigs=sigs)
# for obs.ll we need pis, mus and sigmas
oll.list = c()
#mydata <- as.matrix(faithful)
oll.list[0] = obs.ll(theta, mydata)
thetaNew = theta
# only update some of the zhats at an iteration
z.hats <- getZhats(theta, mydata)
for(q in 1:100) {
#print(q)
sub.indices <- sample(1:nrow(mydata),m)
sub.data <- mydata[sub.indices,]
comp.data <- mydata[-sub.indices,]
z.hats[sub.indices,] <- getZhats(theta, sub.data)
#print(min(z.hats))
theta = paramUpdates(z.hats[sub.indices,], sub.data, theta)
#print(theta)
oll.list[q] = obs.ll(theta, mydata)
}
return(list(theta.mle=theta,obsLog = oll.list, zhats=z.hats))
}
result <- incremental.em(mydata)
m <- 20
incremental.em <- function(mydata, theta = list(pis=c(0.1,0.9), mus=list(as.vector(c(2,60)),as.vector(c(2,50))),
sigs=list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2)))) {
#pis <- c(0.1,0.9)
#mus <- list(as.vector(c(2,60)),as.vector(c(2,50)))
#sigs <- list(matrix(c(0.1,0,0,0.1),2,2),matrix(c(10,0,0,10),2,2))
#theta <- list(pis=pis,mus=mus,sigs=sigs)
# for obs.ll we need pis, mus and sigmas
oll.list = c()
#mydata <- as.matrix(faithful)
oll.list[0] = obs.ll(theta, mydata)
thetaNew = theta
# only update some of the zhats at an iteration
z.hats <- getZhats(theta, mydata)
for(q in 1:100) {
#print(q)
sub.indices <- sample(1:nrow(mydata),m)
sub.data <- mydata[sub.indices,]
comp.data <- mydata[-sub.indices,]
z.hats[sub.indices,] <- getZhats(theta, sub.data)
#print(min(z.hats))
theta = paramUpdates(z.hats[sub.indices,], sub.data, theta)
#print(theta)
oll.list[q] = obs.ll(theta, mydata)
}
return(list(theta.mle=theta,obsLog = oll.list, zhats=z.hats))
}
#result <- incremental.em(mydata)
install.packages("faraway")
print(2*5)
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(lubridate)
# knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE,
error = FALSE,
out.width = "100%",
fig.width = 10,
fig.height = 6.7,
fig.retina = 3,
cache = FALSE)
library.install('faraway')
install.packages("faraway")
library(faraway)
install.packages("lme4")
install.packages("nloptr")
library(faraway)
